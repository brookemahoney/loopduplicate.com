<?php

/**
 * @file
 * Advanced aggregation modifier module.
 */

// Define default variables.
/**
 * Default value to move all JS to the footer.
 */
define('ADVAGG_MOD_JS_FOOTER', 0);

/**
 * Default value to turn on preprocessing for all JavaScript files.
 */
define('ADVAGG_MOD_JS_PREPROCESS', FALSE);

/**
 * Default value to add the defer tag to all script tags.
 */
define('ADVAGG_MOD_JS_DEFER', FALSE);

/**
 * Default value to add use the async script shim for script tags.
 */
define('ADVAGG_MOD_JS_ASYNC_SHIM', FALSE);

/**
 * Default value to remove JavaScript if none was added on the page.
 */
define('ADVAGG_MOD_JS_REMOVE_UNUSED', FALSE);

/**
 * Default value to turn on preprocessing for all CSS files.
 */
define('ADVAGG_MOD_CSS_PREPROCESS', FALSE);

/**
 * Default value to translate the content attributes of CSS files.
 */
define('ADVAGG_MOD_CSS_TRANSLATE', FALSE);

/**
 * Default value to adjust the sorting of external JavaScript.
 */
define('ADVAGG_MOD_JS_ADJUST_SORT_EXTERNAL', FALSE);

/**
 * Default value to adjust the sorting of inline JavaScript.
 */
define('ADVAGG_MOD_JS_ADJUST_SORT_INLINE', FALSE);

/**
 * Default value to adjust the sorting of browser conditional JavaScript.
 */
define('ADVAGG_MOD_JS_ADJUST_SORT_BROWSERS', FALSE);

/**
 * Default value to adjust the sorting of external CSS.
 */
define('ADVAGG_MOD_CSS_ADJUST_SORT_EXTERNAL', FALSE);

/**
 * Default value to adjust the sorting of inline CSS.
 */
define('ADVAGG_MOD_CSS_ADJUST_SORT_INLINE', FALSE);

/**
 * Default value to adjust the sorting of browser conditional CSS.
 */
define('ADVAGG_MOD_CSS_ADJUST_SORT_BROWSERS', FALSE);

/**
 * Default value to use JavaScript to defer CSS loading.
 */
define('ADVAGG_MOD_CSS_DEFER', FALSE);

/**
 * Default value to move CSS into drupal_add_css().
 */
define('ADVAGG_MOD_CSS_HEAD_EXTRACT', FALSE);

/**
 * Default value to move JavaScript into drupal_add_js().
 */
define('ADVAGG_MOD_JS_HEAD_EXTRACT', FALSE);

/**
 * Default value to have async on all JS script tags.
 */
define('ADVAGG_MOD_JS_ASYNC', FALSE);

/**
 * Default value to wrap inline content javascript so it runs when it is ready.
 */
define('ADVAGG_MOD_JS_FOOTER_INLINE_ALTER', TRUE);

/**
 * Define values from the block module if it isn't enabled.
 */
if (!defined('BLOCK_VISIBILITY_NOTLISTED')) define('BLOCK_VISIBILITY_NOTLISTED', 0);
if (!defined('BLOCK_VISIBILITY_LISTED')) define('BLOCK_VISIBILITY_LISTED', 1);
if (!defined('BLOCK_VISIBILITY_PHP')) define('BLOCK_VISIBILITY_PHP', 2);

// Core hook implementations.
/**
 * Implements hook_init().
 */
function advagg_mod_init() {
  // Return if unified_multisite_dir is not set.
  $dir = rtrim(variable_get('advagg_mod_unified_multisite_dir', ''), '/');
  if (empty($dir) || !file_exists($dir) || !is_dir($dir)) {
    return;
  }

  $counter_filename = $dir . '/' . ADVAGG_SPACE . 'advagg_global_counter';
  $local_counter = advagg_get_global_counter();
  if (!file_exists($counter_filename)) {
    module_load_include('inc', 'advagg', 'advagg.missing');
    advagg_save_data($counter_filename, $local_counter);
  }
  else {
    $shared_counter = (int) file_get_contents($counter_filename);

    if ($shared_counter == $local_counter) {
      // Counters are the same, return.
      return;
    }
    elseif ($shared_counter < $local_counter) {
      // Local counter is higher, update saved file and return.
      module_load_include('inc', 'advagg', 'advagg.missing');
      advagg_save_data($counter_filename, $local_counter, TRUE);
      return;
    }
    elseif ($shared_counter > $local_counter) {
      // Shared counter is higher, update local copy and return.
      variable_set('advagg_global_counter', $shared_counter);
      return;
    }
  }
}

/**
 * Implements hook_menu().
 */
function advagg_mod_menu() {
  $file_path = drupal_get_path('module', 'advagg_mod');
  $config_path = advagg_admin_config_root_path();

  $items[$config_path . '/advagg/mod'] = array(
    'title' => 'Modifications',
    'description' => 'Turn on or off various mods for CSS/JS.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advagg_mod_admin_settings_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'file path' => $file_path,
    'file' => 'advagg_mod.admin.inc',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_js_alter().
 */
function advagg_mod_js_alter(&$js) {
  if (module_exists('advagg') && !advagg_enabled()) {
    return;
  }

  // Only add JS if it's actually needed.
  if (variable_get('advagg_mod_js_remove_unused', ADVAGG_MOD_JS_REMOVE_UNUSED)) {
    advagg_remove_js_if_not_used($js);
  }

  // Change sort order so aggregates do not get split up.
  // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
  if (   variable_get('advagg_mod_js_adjust_sort_external', ADVAGG_MOD_JS_ADJUST_SORT_EXTERNAL)
      || variable_get('advagg_mod_js_adjust_sort_inline', ADVAGG_MOD_JS_ADJUST_SORT_INLINE)
      || variable_get('advagg_mod_js_adjust_sort_browsers', ADVAGG_MOD_JS_ADJUST_SORT_BROWSERS)
      ) {
    advagg_mod_sort_css_js($js, 'js');
  }

  // Move all JS to the footer.
  $move_js_to_footer = variable_get('advagg_mod_js_footer', ADVAGG_MOD_JS_FOOTER);
  if (!empty($move_js_to_footer)) {
    foreach ($js as $name => &$values) {
      if ($move_js_to_footer == 1 && $values['group'] <= JS_LIBRARY) {
        continue;
      }

      if (!empty($values['scope_lock'])) {
        continue;
      }

      // Do not move modernizr js to the footer.
      if ($values['type'] !== 'inline' && $values['type'] !== 'setting' && stripos($values['data'], '/modernizr.') !== FALSE) {
        continue;
      }

      // If JS is not in the header increase group by 10000.
      if ($values['scope'] !== 'header') {
        $values['group'] += 10000;
      }
      // If JS is already in the footer increase group by 10000.
      if ($values['scope'] === 'footer') {
        $values['group'] += 10000;
      }
      $values['scope'] = 'footer';
    }
  }

  // Do not use preprocessing if JS is inlined.
  // Do not use defer if JS is inlined.
  if (advagg_mod_inline_page()) {
    advagg_mod_inline_js($js);
    return;
  }

  // Force all JS to be preprocessed.
  if (variable_get('advagg_mod_js_preprocess', ADVAGG_MOD_JS_PREPROCESS)) {
    foreach ($js as $name => &$values) {
      $values['preprocess'] = TRUE;
      $values['cache'] = TRUE;
    }
  }

  // Add the defer or the async tag to all JS.
  // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
  if (   variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER)
      || variable_get('advagg_mod_js_async', ADVAGG_MOD_JS_ASYNC)
      ) {
    foreach ($js as $name => &$values) {
      if ($values['type'] !== 'file' && $values['type'] !== 'external') {
        continue;
      }
      if (variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER)) {
        // Everything is defer.
        $values['defer'] = TRUE;
      }
      if (variable_get('advagg_mod_js_async', ADVAGG_MOD_JS_ASYNC)) {
        // Everything is async.
        $values['async'] = TRUE;
      }

      if (strpos($name, 'jquery.js') !== FALSE || strpos($name, 'jquery.min.js') !== FALSE) {
        // Do not defer/async the loading of jquery.js
        if (variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER)) {
          $values['defer'] = FALSE;
        }
        if (variable_get('advagg_mod_js_async', ADVAGG_MOD_JS_ASYNC)) {
          $values['async'] = FALSE;
        }

        // jquery_update fallback.
        if (module_exists('jquery_update')) {
          $values['onload'] = "if (typeof window.init_drupal_jquery_update_fallback === 'function') {init_drupal_jquery_update_fallback();}";
        }
      }
      if (strpos($name, 'jquery-ui.js') !== FALSE || strpos($name, 'jquery-ui.min.js') !== FALSE) {
        // Do not defer/async the loading of jquery-ui.js
        if (variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER)) {
          $values['defer'] = FALSE;
        }
        if (variable_get('advagg_mod_js_async', ADVAGG_MOD_JS_ASYNC)) {
          $values['async'] = FALSE;
        }

        // jquery_update fallback.
        if (module_exists('jquery_update')) {
          $values['onload'] = "if (typeof window.init_drupal_jquery_ui_update_fallback === 'function') {init_drupal_jquery_ui_update_fallback();}";
        }
      }

      // Drupal settings.
      if ($name === 'misc/drupal.js') {
        $values['onload'] = "if (typeof window.init_drupal_core_settings === 'function') {init_drupal_core_settings();}";
        if (variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER)) {
          $values['defer'] = FALSE;
        }
        if (variable_get('advagg_mod_js_async', ADVAGG_MOD_JS_ASYNC)) {
          $values['async'] = FALSE;
        }
      }
      if ($name === 'misc/jquery.once.js') {
        if (variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER)) {
          $values['defer'] = FALSE;
        }
        if (variable_get('advagg_mod_js_async', ADVAGG_MOD_JS_ASYNC)) {
          $values['async'] = FALSE;
        }
      }
    }
  }
}

/**
 * Implements hook_css_alter().
 */
function advagg_mod_css_alter(&$css) {
  if (module_exists('advagg') && !advagg_enabled()) {
    return;
  }

  // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace:5
  // Change sort order so aggregates do not get split up.
  if (   variable_get('advagg_mod_css_adjust_sort_external', ADVAGG_MOD_CSS_ADJUST_SORT_EXTERNAL)
      || variable_get('advagg_mod_css_adjust_sort_inline', ADVAGG_MOD_CSS_ADJUST_SORT_INLINE)
      || variable_get('advagg_mod_css_adjust_sort_browsers', ADVAGG_MOD_CSS_ADJUST_SORT_BROWSERS)
      ) {
    advagg_mod_sort_css_js($css, 'css');
  }

  // Do not use preprocessing if CSS is inlined.
  if (advagg_mod_inline_page()) {
    advagg_mod_inline_css($css);
    return;
  }

  // Force all CSS to be preprocessed.
  if (variable_get('advagg_mod_css_preprocess', ADVAGG_MOD_CSS_PREPROCESS)) {
    foreach ($css as $name => &$values) {
      $values['preprocess'] = TRUE;
    }
  }
}

/**
 * Implements hook_html_head_alter().
 */
function advagg_mod_html_head_alter(&$head_elements) {
  foreach ($head_elements as $key => $element) {
    // CSS
    // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
    if (   variable_get('advagg_mod_css_head_extract', ADVAGG_MOD_CSS_HEAD_EXTRACT)
        && !empty($element['#tag'])
        && $element['#tag'] === 'link'
        && !empty($element['#attributes']['type'])
        && $element['#attributes']['type'] === 'text/css'
        && !empty($element['#attributes']['href'])
        ) {
      $type = 'file';
      // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
      if (   strpos($element['#attributes']['href'], 'http://') === 0
          || strpos($element['#attributes']['href'], 'https://') === 0
          || strpos($element['#attributes']['href'], '//') === 0
          ) {
        $type = 'external';
      }
      drupal_add_css($element['#attributes']['href'], array(
        'type' => $type,
        'group' => CSS_SYSTEM,
        'every_page' => TRUE,
        'weight' => -50000,
      ));
      unset($head_elements[$key]);
    }
    // JS
    // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
    if (   variable_get('advagg_mod_js_head_extract', ADVAGG_MOD_JS_HEAD_EXTRACT)
        && !empty($element['#tag'])
        && $element['#tag'] === 'script'
        && !empty($element['#attributes']['type'])
        && $element['#attributes']['type'] === 'text/javascript'
        && !empty($element['#attributes']['src'])
        ) {
      $type = 'file';
      // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
      if (   strpos($element['#attributes']['src'], 'http://') === 0
          || strpos($element['#attributes']['src'], 'https://') === 0
          || strpos($element['#attributes']['src'], '//') === 0
          ) {
        $type = 'external';
      }
      drupal_add_js($element['#attributes']['src'], array(
        'type' => $type,
        'scope' => 'header',
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
        'weight' => -50000,
      ));
      unset($head_elements[$key]);
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Insert advagg_mod_process_move_js before _advagg_process_html.
 */
function advagg_mod_theme_registry_alter(&$theme_registry) {
  if (!isset($theme_registry['html'])) {
    return;
  }

  // Find template_process_html/_advagg_process_html.
  $index = array_search('_advagg_process_html', $theme_registry['html']['process functions']);
  if ($index === FALSE) {
    $index = array_search('template_process_html', $theme_registry['html']['process functions']);
    if ($index === FALSE) {
      return;
    }
  }

  // Insert advagg_mod_process_move_js before _advagg_process_html.
  array_splice($theme_registry['html']['process functions'], $index, 0, 'advagg_mod_process_move_js');
}

/**
 * Implements hook_process().
 *
 * Used to wrap inline JS in a function in order to prevent js errors when JS is
 * moved to the footer.
 */
function advagg_mod_process_move_js(&$variables) {
  // Only run if.
  // $variables['page'] is not empty.
  // Setting is enabled.
  if (empty($variables['page']) || !variable_get('advagg_mod_js_footer_inline_alter', ADVAGG_MOD_JS_FOOTER_INLINE_ALTER)) {
    return;
  }

  // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
  if (   variable_get('advagg_mod_js_footer', ADVAGG_MOD_JS_FOOTER) != 2
      && !variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER)
      && !variable_get('advagg_mod_js_async', ADVAGG_MOD_JS_ASYNC)
      ) {
    return;
  }

  $pattern = '/<script((?:(?!src=).)*?)>(.*?)<\/script>/smix';
  $callback = 'advagg_mod_wrap_inline_js';
  // Wrap inline JS with a check so that it only runs once Drupal.settings &
  // jQuery are not undefined.
  // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
  if (   !empty($variables['page']['#children'])
      && is_string($variables['page']['#children'])
      && stripos($variables['page']['#children'], '<script') !== FALSE
      ) {
    $variables['page']['#children'] = preg_replace_callback($pattern, $callback, $variables['page']['#children']);
    return;
  }
  // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
  if (   is_string($variables['page'])
      && stripos($variables['page'], '<script') !== FALSE
      ) {
    $variables['page'] = preg_replace_callback($pattern, $callback, $variables['page']);
    return;
  }
}

// AdvAgg hook implementations.
/**
 * Implements hook_advagg_modify_js_pre_render_alter().
 */
function advagg_mod_advagg_modify_js_pre_render_alter(&$children, &$elements) {
  if (module_exists('advagg') && !advagg_enabled()) {
    return;
  }

  // Do not use defer/async shim if JS is inlined.
  if (advagg_mod_inline_page()) {
    return;
  }

  // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
  if (   variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER)
      || variable_get('advagg_mod_js_async', ADVAGG_MOD_JS_ASYNC)
      ) {
    foreach ($children as &$values) {
      if (empty($values['#attributes']['src'])) {
        continue;
      }
      if (variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER) && isset($values['#attributes']['defer'])) {
        $values['#attributes']['defer'] = TRUE;
      }
      if (variable_get('advagg_mod_js_async', ADVAGG_MOD_JS_ASYNC) && isset($values['#attributes']['async'])) {
        $values['#attributes']['async'] = TRUE;
      }
      // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
      if (   strpos($values['#attributes']['src'], 'jquery-ui.js') !== FALSE
          || strpos($values['#attributes']['src'], 'jquery-ui.min.js') !== FALSE
          || strpos($values['#attributes']['src'], 'jquery.js') !== FALSE
          || strpos($values['#attributes']['src'], 'jquery.min.js') !== FALSE
          || strpos($values['#attributes']['src'], 'jquery.once.js') !== FALSE
          || strpos($values['#attributes']['src'], 'jquery.once.min.js') !== FALSE
          ) {
        unset($values['#attributes']['async']);
      }
      if (empty($values['#value'])) {
        continue;
      }

      // Workaround bug with onload and jquery update.
      if (!empty($values['#attributes']['onload'])) {
        unset($values['#attributes']['onload']);
      }

      // Core.
      if (strpos($values['#value'], 'jQuery.extend(Drupal.settings') !== FALSE) {
        $values['#value'] = 'function init_drupal_core_settings() {' . $values['#value'] . '}';
      }

      // JQuery Update.
      if (strpos($values['#value'], 'window.jQuery') !== FALSE) {
        $values['#value'] = 'function init_drupal_jquery_update_fallback() {' . $values['#value'] . '}';
      }
      if (strpos($values['#value'], 'window.jQuery.ui') !== FALSE) {
        $values['#value'] = 'function init_drupal_jquery_ui_update_fallback() {' . $values['#value'] . '}';
      }
    }
  }

  if (variable_get('advagg_mod_js_async_shim', ADVAGG_MOD_JS_ASYNC_SHIM)) {
    foreach ($children as &$values) {
      if (isset($values['#attributes']) && isset($values['#attributes']['async']) && $values['#attributes']['async'] === 'async' && !empty($values['#attributes']['src'])) {
        $source = $values['#attributes']['src'];
        // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace
        if (   strpos($source, 'http://') !== 0
            && strpos($source, 'https://') !== 0
            && strpos($source, '//') !== 0
            ) {
          $source = url($values['#attributes']['src']);
        }
        $values['#value'] = "(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '$source';
  var d = document.getElementsByTagName('script')[0];
  d.parentNode.insertBefore(s, d);
})();";
        unset($values['#attributes']['async']);
        unset($values['#attributes']['src']);
      }
    }
  }
}

/**
 * Implements hook_advagg_modify_css_pre_render_alter().
 */
function advagg_mod_advagg_modify_css_pre_render_alter(&$children, &$elements) {
  if (module_exists('advagg') && !advagg_enabled()) {
    return;
  }

  // Return early if this setting is disabled.
  $css_defer = variable_get('advagg_mod_css_defer', ADVAGG_MOD_CSS_DEFER);
  if (empty($css_defer)) {
    return;
  }

  // Make advagg_mod_loadStyleSheet() available.
  $options = array(
    'type' => 'file',
    'scope' => $css_defer >= 7 ? 'footer' : 'header',
    'scope_lock' => TRUE,
    'every_page' => TRUE,
    'group' => $css_defer == 1 ? JS_LIBRARY - 1: JS_LIBRARY,
    'weight' => $css_defer == 1 ? -50000 : 0,
  );
  drupal_add_js(drupal_get_path('module', 'advagg_mod') . '/advagg_mod_css_defer.js', $options);

  // Wrap CSS in noscript tags.
  $options = array(
    'type' => 'inline',
    'scope' => $css_defer >= 5 ? 'footer' : 'header',
    'scope_lock' => TRUE,
    'group' => $css_defer == 1 ? JS_LIBRARY - 1 : JS_DEFAULT,
    'weight' => $css_defer == 1 ? -50000 : 0,
    'movable' => $css_defer == 1 ? FALSE : TRUE,
  );
  foreach ($children as &$values) {
    // Do not defer inline scripts
    if ($values['#tag'] === 'style') {
      continue;
    }
    if (!empty($values['#attributes']['href'])) {
      // Wrap current css in noscript tags.
      $values['#prefix'] = '<noscript>' . "\n";
      $values['#suffix'] = '</noscript>';

      // Add browsers to the js options.
      if (isset($values['#browsers'])) {
        $options['browsers'] = $values['#browsers'];
      }
      $inline = 'advagg_mod_loadStyleSheet("' . $values['#attributes']['href'] . '")';
      // Make defer work if enabled.
      if (   variable_get('advagg_mod_js_defer', ADVAGG_MOD_JS_DEFER)
          || variable_get('advagg_mod_js_async', ADVAGG_MOD_JS_ASYNC)
          ) {
        $matches[2] = $matches[0] = $inline;
        $inline = advagg_mod_wrap_inline_js($matches);
      }
      // Add in script tags to load css via js.
      drupal_add_js($inline, $options);
      // Reset for next item in loop.
      if (isset($options['browsers'])) {
        unset($options['browsers']);
      }
    }
  }
}

/**
 * Implements hook_advagg_get_root_files_dir_alter().
 */
function advagg_mod_advagg_get_root_files_dir_alter(&$css_paths, &$js_paths) {
  $dir = rtrim(variable_get('advagg_mod_unified_multisite_dir', ''), '/');
  if (empty($dir) || !file_exists($dir) || !is_dir($dir)) {
    return;
  }
  // Change directory.
  $css_paths[0] = $dir . '/advagg_css';
  $js_paths[0] = $dir . '/advagg_js';

  file_prepare_directory($css_paths[0], FILE_CREATE_DIRECTORY);
  file_prepare_directory($js_paths[0], FILE_CREATE_DIRECTORY);

  // Set the URI of the directory.
  $css_paths[1] = parse_url(file_create_url($css_paths[0]), PHP_URL_PATH);
  if (substr($css_paths[1], 0, strlen($GLOBALS['base_path'])) == $GLOBALS['base_path']) {
    $css_paths[1] = substr($css_paths[1], strlen($GLOBALS['base_path']));
  }
  $js_paths[1] = parse_url(file_create_url($js_paths[0]), PHP_URL_PATH);
  if (substr($js_paths[1], 0, strlen($GLOBALS['base_path'])) == $GLOBALS['base_path']) {
    $js_paths[1] = substr($js_paths[1], strlen($GLOBALS['base_path']));
  }
}

/**
 * Implements hook_advagg_current_hooks_hash_array_alter().
 */
function advagg_mod_advagg_current_hooks_hash_array_alter(&$aggregate_settings) {
  $aggregate_settings['variables']['advagg_mod_css_translate'] = variable_get('advagg_mod_css_translate', ADVAGG_MOD_CSS_TRANSLATE);
  if (variable_get('advagg_mod_css_translate', ADVAGG_MOD_CSS_TRANSLATE)) {
    $aggregate_settings['variables']['advagg_mod_css_translate_lang'] = isset($GLOBALS['language']->language) ? $GLOBALS['language']->language : 'en';
  }
}

// Helper Functions.
/**
 * Callback for preg_replace_callback.
 *
 * Used to wrap inline JS in a function in order to prevent js errors when JS is
 * moved to the footer.
 *
 * @param array $matches
 *   $matches[0] is the full string; $matches[2] is just the JavaScript.
 *
 * @return string
 *   Inline javascript code wrapped up in a loader to prevent errors.
 */
function advagg_mod_wrap_inline_js($matches) {
  // Use a counter in order to create unique function names.
  static $counter;
  ++$counter;

  // JS wrapper code.
  $new = "
function advagg_mod_drupal_settings_loaded$counter() {
  // Count how many times this function is called.
  advagg_mod_drupal_settings_loaded$counter.count = ++advagg_mod_drupal_settings_loaded$counter.count || 1;
  try {
    if (advagg_mod_drupal_settings_loaded$counter.count <= 10) {
      $matches[2]

      // Set this to 100 so that this function only runs once.
      advagg_mod_drupal_settings_loaded$counter.count = 100;
    }
  }
  catch(e) {
    if (advagg_mod_drupal_settings_loaded$counter.count >= 10) {
      // Throw the exception if this still fails after 5 seconds.
      throw e;
    }
    else {
      // Try again in half a second.
      window.setTimeout(advagg_mod_drupal_settings_loaded$counter, 500);
    }
  }
}
function advagg_mod_check_if_drupal_settings_loaded$counter() {
    if (typeof window.Drupal !== 'undefined' && typeof window.Drupal.settings !== 'undefined' && typeof window.jQuery !== 'undefined') {
        advagg_mod_drupal_settings_loaded$counter();
    }
    else {
        window.setTimeout(advagg_mod_check_if_drupal_settings_loaded$counter, 500);
    }
}
advagg_mod_check_if_drupal_settings_loaded$counter();";

  $return = str_replace($matches[2], $new, $matches[0]);
  return $return;
}

/**
 * Rearrange CSS/JS so that aggregates are better grouped.
 *
 * This can move all external assets to the top, thus in one group.
 * This can move all inline assets to the bottom, thus in one group.
 * This can move all browser conditional assets together.
 *
 * @param array $array
 *   The CSS or JS array.
 * @param string $type
 *   css or js.
 */
function advagg_mod_sort_css_js(&$array, $type) {
  // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace:3
  if (   ($type === 'js' && variable_get('advagg_mod_js_adjust_sort_external', ADVAGG_MOD_JS_ADJUST_SORT_EXTERNAL))
      || ($type === 'css' && variable_get('advagg_mod_css_adjust_sort_external', ADVAGG_MOD_CSS_ADJUST_SORT_EXTERNAL))
      ) {
    // Find all external items.
    $external = array();
    $group = NULL;
    $every_page = NULL;
    $weight = NULL;
    foreach ($array as $key => $value) {
      // Set values if not set.
      if (is_null($group)) {
        $group = $value['group'];
      }
      if (is_null($every_page)) {
        $every_page = $value['every_page'];
      }
      if (is_null($weight)) {
        $weight = $value['weight'];
      }

      // Find "lightest" item.
      if ($value['group'] < $group) {
        $group = $value['group'];
      }
      if ($value['every_page'] && !$every_page) {
        $every_page = $value['every_page'];
      }
      if ($value['weight'] < $weight) {
        $weight = $value['weight'];
      }

      if (!empty($value['type']) && $value['type'] === 'external') {
        $external[$key] = $value;
        unset($array[$key]);
      }

      if (!empty($value['type']) && $value['type'] === 'inline') {
        // Move jQuery fallback as well.
        if (strpos($value['data'], 'window.jQuery') === 0) {
          $external[$key] = $value;
          unset($array[$key]);
        }
        // Move jQuery ui fallback as well.
        if (strpos($value['data'], 'window.jQuery.ui') === 0) {
          $external[$key] = $value;
          unset($array[$key]);
        }
      }
    }
    // Sort the array so that it appears in the correct order.
    advagg_drupal_sort_css_js_stable($external);

    // Group all external together.
    $offset = 0.0001;
    $weight += -1;
    $found_jquery = FALSE;
    foreach ($external as $key => $value) {
      if (isset($value['movable']) && empty($value['movable'])) {
        $array[$key] = $value;
        continue;
      }
      // If bootstrap is used, it must be loaded after jquery. Don't move
      // bootstrap if jquery is not above it.
      if (strpos($value['data'], 'jquery.min.js') !== FALSE || strpos($value['data'], 'jquery.js') !== FALSE ) {
        $found_jquery = TRUE;
      }
      if (!$found_jquery && (strpos($value['data'], 'bootstrap.min.js') !== FALSE || strpos($value['data'], 'bootstrap.js') !== FALSE)) {
        $array[$key] = $value;
        continue;
      }
      $value['group'] = $group;
      $value['every_page'] = $every_page;
      $value['weight'] = $weight;
      $weight += $offset;
      $array[$key] = $value;
    }
  }

  // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace:3
  if (   ($type === 'js' && variable_get('advagg_mod_js_adjust_sort_inline', ADVAGG_MOD_JS_ADJUST_SORT_INLINE))
      || ($type === 'css' && variable_get('advagg_mod_css_adjust_sort_inline', ADVAGG_MOD_CSS_ADJUST_SORT_INLINE))
      ) {
    // Find all inline items.
    $inline = array();
    $group = NULL;
    $every_page = NULL;
    $weight = NULL;
    foreach ($array as $key => $value) {
      // Set values if not set.
      if (is_null($group)) {
        $group = $value['group'];
      }
      if (is_null($every_page)) {
        $every_page = $value['every_page'];
      }
      if (is_null($weight)) {
        $weight = $value['weight'];
      }

      // Find "heaviest" item.
      if ($value['group'] > $group) {
        $group = $value['group'];
      }
      if (!$value['every_page'] && $every_page) {
        $every_page = $value['every_page'];
      }
      if ($value['weight'] > $weight) {
        $weight = $value['weight'];
      }

      if (!empty($value['type']) && $value['type'] === 'inline') {
        // Do not move jQuery fallback.
        if (strpos($value['data'], 'window.jQuery') === 0) {
          continue;
        }
        // Do not move jQuery.ui fallback.
        if (strpos($value['data'], 'window.jQuery.ui') === 0) {
          continue;
        }
        $inline[$key] = $value;
        unset($array[$key]);
      }
    }
    // Sort the array so that it appears in the correct order.
    advagg_drupal_sort_css_js_stable($inline);

    // Group all inline together.
    $offset = 0.0001;
    $weight += 1;
    foreach ($inline as $key => $value) {
      if (isset($value['movable']) && empty($value['movable'])) {
        $array[$key] = $value;
        continue;
      }
      $value['group'] = $group;
      $value['every_page'] = $every_page;
      $value['weight'] = $weight;
      $weight += $offset;
      $array[$key] = $value;
    }
  }

  // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace:3
  if (   ($type === 'js' && variable_get('advagg_mod_js_adjust_sort_browsers', ADVAGG_MOD_JS_ADJUST_SORT_BROWSERS))
      || ($type === 'css' && variable_get('advagg_mod_css_adjust_sort_browsers', ADVAGG_MOD_CSS_ADJUST_SORT_BROWSERS))
      ) {
    // Get a list of browsers.
    $browsers_list = array();
    foreach ($array as $key => $value) {
      if (isset($value['browsers']['IE']) && $value['browsers']['IE'] !== TRUE) {
        $browsers_list['IE'][] = $value['browsers']['IE'];
      }
    }

    // Group browsers CSS together.
    if (isset($browsers_list['IE'])) {
      $browsers_list['IE'] = array_values(array_unique($browsers_list['IE']));
      foreach ($browsers_list['IE'] as $browser) {
        $browsers = array();
        $group = NULL;
        $every_page = NULL;
        $weight = NULL;
        foreach ($array as $key => $value) {
          if (isset($value['browsers']['IE']) && $browser === $value['browsers']['IE']) {
            // Set values if not set.
            if (is_null($group)) {
              $group = $value['group'];
            }
            if (is_null($every_page)) {
              $every_page = $value['every_page'];
            }
            if (is_null($weight)) {
              $weight = $value['weight'];
            }

            // Find "heaviest" item.
            if ($value['group'] > $group) {
              $group = $value['group'];
            }
            if (!$value['every_page'] && $every_page) {
              $every_page = $value['every_page'];
            }
            if ($value['weight'] > $weight) {
              $weight = $value['weight'];
            }

            $browsers[$key] = $value;
            unset($array[$key]);
          }
        }

        // Sort the array so that it appears in the correct order.
        advagg_drupal_sort_css_js_stable($browsers);

        // Group all browsers together.
        $offset = 0.0001;
        foreach ($browsers as $key => $value) {
          if (isset($value['movable']) && empty($value['movable'])) {
            $array[$key] = $value;
            continue;
          }
          $value['group'] = $group;
          $value['every_page'] = $every_page;
          $value['weight'] = $weight;
          $weight += $offset;
          $array[$key] = $value;
        }
      }
    }
  }
}

/**
 * Returns TRUE if this page should have inline CSS/JS.
 *
 * @return bool
 *   TRUE or FALSE.
 */
function advagg_mod_inline_page() {
  $visibility = variable_get('advagg_mod_inline_visibility', BLOCK_VISIBILITY_LISTED);
  $pages = variable_get('advagg_mod_inline_pages', '');
  return advagg_mod_match_path($pages, $visibility);
}

/**
 * Transforms all JS files into inline JS.
 *
 * @param array $js
 *   JS array.
 */
function advagg_mod_inline_js(&$js) {
  $aggregate_settings = advagg_current_hooks_hash_array();

  foreach ($js as $name => &$values) {
    // Only process files.
    if ($values['type'] !== 'file') {
      continue;
    }
    $filename = $values['data'];
    if (file_exists($filename)) {
      $contents = file_get_contents($filename);
    }
    // Allow other modules to modify this files contents.
    // Call hook_advagg_get_js_file_contents_alter().
    drupal_alter('advagg_get_js_file_contents', $contents, $filename, $aggregate_settings);

    $values['data'] = $contents;
    $values['type'] = 'inline';
  }
}

/**
 * Transforms all CSS files into inline CSS.
 *
 * @param array $css
 *   CSS array.
 *
 * @see advagg_get_css_aggregate_contents()
 * @see drupal_build_css_cache()
 */
function advagg_mod_inline_css(&$css) {
  $aggregate_settings = advagg_current_hooks_hash_array();
  $optimize = TRUE;
  module_load_include('inc', 'advagg', 'advagg');

  foreach ($css as $name => &$values) {
    // Only process files.
    if ($values['type'] !== 'file') {
      continue;
    }

    $file = $values['data'];
    if (file_exists($file)) {
      $contents = advagg_load_css_stylesheet($file, $optimize, $aggregate_settings);

      // Allow other modules to modify this files contents.
      // Call hook_advagg_get_css_file_contents_alter().
      drupal_alter('advagg_get_css_file_contents', $contents, $file, $aggregate_settings);

      // Per the W3C specification at
      // http://www.w3.org/TR/REC-CSS2/cascade.html#at-import, @import rules
      // must proceed any other style, so we move those to the top.
      $regexp = '/@import[^;]+;/i';
      preg_match_all($regexp, $contents, $matches);
      $contents = preg_replace($regexp, '', $contents);
      $contents = implode('', $matches[0]) . $contents;

      $values['data'] = $contents;
      $values['type'] = 'inline';
    }
  }
}

/**
 * Transforms all CSS files into inline CSS.
 *
 * @param string $pages
 *   string from the advagg_mod_inline_pages variable.
 * @param int $visibility
 *   visibility setting from the advagg_mod_inline_visibility variable.
 *
 * @return bool
 *   TRUE if the current path matches the given pages.
 *
 * @see block_block_list_alter()
 */
function advagg_mod_match_path($pages, $visibility) {
  // Limited visibility blocks must list at least one page.
  if ($visibility == BLOCK_VISIBILITY_LISTED && empty($pages)) {
    $page_match = FALSE;
  }
  elseif ($pages) {
    // Match path if necessary.
    // Convert path to lowercase. This allows comparison of the same path
    // with different case. Ex: /Page, /page, /PAGE.
    $pages = drupal_strtolower($pages);
    if ($visibility < BLOCK_VISIBILITY_PHP) {
      // Convert the Drupal path to lowercase.
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }
      // When $visibility has a value of 0 (BLOCK_VISIBILITY_NOTLISTED),
      // the block is displayed on all pages except those listed in $pages.
      // When set to 1 (BLOCK_VISIBILITY_LISTED), it is displayed only on those
      // pages listed in $block->pages.
      $page_match = !($visibility xor $page_match);
    }
    elseif (module_exists('php')) {
      $page_match = php_eval($pages);
    }
    else {
      $page_match = FALSE;
    }
  }
  else {
    $page_match = TRUE;
  }

  return $page_match;
}

/**
 * See if JavaScript file contains drupal and/or jquery.
 *
 * @param string $filename
 *   inline css, full URL, or filename.
 * @param string $type
 *   (optional) inline, external, or file.
 *
 * @return array
 *   Returns an array stating if this JS file contains drupal or jquery.
 *
 * @see block_block_list_alter()
 */
function advagg_mod_js_contains_jquery_drupal($filename, $type = '') {
  if (is_string($filename)) {
    // @ignore sniffer_whitespace_openbracketspacing_openingwhitespace:4
    if ($type === 'inline') {
      $contents = $filename;
    }
    elseif (   $type === 'external'
            || strpos($filename, 'http://') === 0
            || strpos($filename, 'https://') === 0
            || strpos($filename, '//') === 0
            ) {
      $result = drupal_http_request($filename);
      if (($result->code == 200 || (isset($result->redirect_code) && $result->redirect_code == 200)) && !empty($result->data)) {
        $contents = $result->data;
      }
    }
    elseif (file_exists($filename)) {
      $contents = file_get_contents($filename);
    }
  }

  $results = array();
  if (!empty($contents) && stripos($contents, 'drupal.') !== FALSE) {
    $results['contents']['drupal'] = TRUE;
    if (stripos($contents, 'drupal.settings.') !== FALSE) {
      $results['contents']['drupal.settings'] = TRUE;
    }
    else {
      $results['contents']['drupal.settings'] = FALSE;
    }
    if (stripos($contents, 'drupal.behaviors.') !== FALSE) {
      $results['contents']['drupal.behaviors'] = TRUE;
    }
    else {
      $results['contents']['drupal.behaviors'] = FALSE;
    }
  }
  else {
    $results['contents']['drupal'] = FALSE;
    $results['contents']['drupal.settings'] = FALSE;
    $results['contents']['drupal.behaviors'] = FALSE;
  }
  if (!empty($contents) && stripos($contents, 'jquery') !== FALSE) {
    $results['contents']['jquery'] = TRUE;
  }
  else {
    $results['contents']['jquery'] = FALSE;
  }
  return $results;
}

/**
 * Remove JS if not in use on current page.
 *
 * @param array $js
 *   JS array.
 */
function advagg_remove_js_if_not_used(&$js) {
  // Do not run the following code if drupal_add_js_page_defaults exists.
  if (function_exists('drupal_add_js_page_defaults')) {
    return;
  }

  $files_skiplist = array(
    'drupal.js',
    'jquery.js',
    'jquery.min.js',
    'jquery.once.js',
  );
  $inline_skiplist = array();
  if (module_exists('jquery_update')) {
    $inline_skiplist[] = 'document.write("<script src=\'' . $GLOBALS['base_path'] . drupal_get_path('module', 'jquery_update') . '/replace/jquery/' . variable_get('jquery_update_jquery_version', '1.10') . '/jquery' . (variable_get('jquery_update_compression_type', 'min') === 'none' ? '' : '.min') . ".js'>";
  }
  if (module_exists('labjs')) {
    $inline_skiplist[] = 'var $L = $LAB.setGlobalDefaults';
  }

  $include_jquery = FALSE;
  $include_drupal = FALSE;
  module_load_include('inc', 'advagg', 'advagg');

  // Look at each JavaScript entry & get the info on it.
  $files_info_filenames = array();
  foreach ($js as $name => &$values) {
    if ($values['type'] === 'file' || $values['type'] === 'external') {
      foreach ($files_skiplist as $skip_name) {
        if (substr_compare($values['data'], $skip_name, -strlen($skip_name), strlen($skip_name)) === 0) {
          continue 2;
        }
      }
      $files_info_filenames[] = $values['data'];

    }
  }
  $files_info = advagg_get_info_on_files($files_info_filenames);

  // Look at each JavaScript entry & see if it uses jquery or drupal.
  foreach ($js as $name => &$values) {
    if ($values['type'] === 'file' || $values['type'] === 'external') {
      foreach ($files_skiplist as $skip_name) {
        if (substr_compare($values['data'], $skip_name, -strlen($skip_name), strlen($skip_name)) === 0) {
          continue 2;
        }
      }
    }
    if ($values['type'] === 'inline' && !empty($inline_skiplist)) {
      foreach ($inline_skiplist as $skip_string) {
        if (stripos($values['data'], $skip_string) !== FALSE) {
          continue 2;
        }
      }
    }
    // Get advagg_mod info if not set.
    if (!isset($files_info[$name]['advagg_mod'])) {
      $files_info[$name]['advagg_mod'] = advagg_mod_js_contains_jquery_drupal($values['data'], $values['type']);
    }
    if ($files_info[$name]['advagg_mod']['contents']['drupal']) {
      $include_jquery = TRUE;
      $include_drupal = TRUE;
    }
    elseif ($files_info[$name]['advagg_mod']['contents']['jquery']) {
      $include_jquery = TRUE;
    }
  }

  // Kill only drupal JavaScript.
  if (!$include_drupal) {
    unset($js['settings']);
    foreach ($js as $name => &$values) {
      $drupal = 'drupal.js';
      if (substr_compare($name, $drupal, -strlen($drupal), strlen($drupal)) === 0) {
        unset($js[$name]);
      }
    }

    // Kill all default JavaScript.
    if (!$include_jquery) {
      foreach ($js as $name => &$values) {
        if ($values['type'] === 'file' || $values['type'] === 'external') {
          foreach ($files_skiplist as $skip_name) {
            if (substr_compare($name, $skip_name, -strlen($skip_name), strlen($skip_name)) === 0) {
              unset($js[$name]);
            }
          }
        }
        elseif ($values['type'] === 'inline') {
          foreach ($inline_skiplist as $skip_string) {
            if (stripos($values['data'], $skip_string) !== FALSE) {
              unset($js[$name]);
            }
          }
        }
      }
    }
  }
}

// @ignore sniffer_commenting_functioncomment_hookreturndoc:12
// @ignore sniffer_commenting_functioncomment_hookparamdoc:8
/**
 * Implements hook_magic().
 *
 * @param array $magic_settings
 *   The renderable form array of the magic module theme settings. READ ONLY
 * @param string $theme
 *   The theme that the settings will be editing.
 *
 * @return array
 *   The array of settings within the magic module theme page. Must not contain
 *   anything from the $magic_settings array.
 */
function advagg_mod_magic($magic_settings, $theme) {
  $settings = array();

  // If possible disable access and set default to false.
  if (!isset($magic_settings['css']['magic_embedded_mqs']['#access'])) {
    $settings['css']['magic_embedded_mqs']['#access'] = FALSE;
  }
  if (!isset($magic_settings['css']['magic_embedded_mqs']['#default_value'])) {
    $settings['css']['magic_embedded_mqs']['#default_value'] = FALSE;
  }
  if (!isset($magic_settings['js']['magic_footer_js']['#access'])) {
    $settings['js']['magic_footer_js']['#access'] = FALSE;
  }
  if (!isset($magic_settings['js']['magic_footer_js']['#default_value'])) {
    $settings['js']['magic_footer_js']['#default_value'] = FALSE;
  }
  if (!isset($magic_settings['js']['magic_library_head']['#access'])) {
    $settings['js']['magic_library_head']['#access'] = FALSE;
  }
  if (!isset($magic_settings['js']['magic_library_head']['#default_value'])) {
    $settings['js']['magic_library_head']['#default_value'] = FALSE;
  }
  if (!isset($magic_settings['js']['magic_experimental_js']['#access'])) {
    $settings['js']['magic_experimental_js']['#access'] = FALSE;
  }
  if (!isset($magic_settings['js']['magic_experimental_js']['#default_value'])) {
    $settings['js']['magic_experimental_js']['#default_value'] = FALSE;
  }

  // Add in our own validate function so we can preprocess variables before
  // they are saved.
  $settings['#validate'] = array('advagg_mod_magic_form_validate');
  return $settings;
}

/**
 * Form validation handler. Disable certain magic settings before being saved.
 */
function advagg_mod_magic_form_validate($form, &$form_state) {
  // Disable magic functionality if it is a duplicate of AdvAgg.
  $form_state['values']['magic_embedded_mqs'] = 0;
  $form_state['values']['magic_footer_js'] = 0;
  $form_state['values']['magic_library_head'] = 0;
  $form_state['values']['magic_experimental_js'] = 0;
}
