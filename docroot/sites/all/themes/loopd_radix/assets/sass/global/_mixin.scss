/**
 * @file
 * Custom sass mixins
 * 
 * Define the custom mixins for your project here.
 * http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin
 */

/**
 * Makes an element visually hidden, but accessible.
 * @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 */
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    clip: rect(1px 1px 1px 1px); // IE6 and IE7 use the wrong syntax.
  }
  clip: rect(1px, 1px, 1px, 1px);
}

/* Turns off the element-invisible effect. */
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

/* Makes an element visually hidden by default, but visible when focused. */
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

/**
 * Cross browser alpha for any attribute.
 *
 * Usage:
 * .button {
 *   @include alpha-attribute('background-color', rgba(black, 0.5), white);
 * }
 *
 * Produces the following CSS:
 * .button {
 *   background-color: #7f7f7f;
 *   background-color: rgba(black, 0.5);
 * }
 *
 * @see http://thesassway.com/intermediate/mixins-for-semi-transparent-colors
 */
@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
}
